package com.smart.light.exporter.jxlimport jxl.Workbookimport jxl.format.Alignmentimport jxl.format.Borderimport jxl.format.BorderLineStyleimport jxl.format.VerticalAlignmentimport jxl.write.*import org.apache.commons.lang.Validate/** * * lvpeng on 2015/6/9. */class XlsTemplateExporter {     WritableWorkbook workbook    String[] title    Map<Integer,List> listMap = new HashMap<Integer,List>()    private void doExport(OutputStream outputStream, String[] sheetNames) throws IOException {        Validate.notNull(outputStream, 'outputStream is null')        Validate.notNull(sheetNames, 'sheetNames is null')        workbook = Workbook.createWorkbook(outputStream)        def sheetRange = 1..sheetNames.length        sheetRange.each {            int index = it.asType(int)            WritableSheet ws = workbook.createSheet(sheetNames[index-1], index)            this.buildTitle(ws)            this.buildBlankBody(ws)        }        workbook.write()        workbook.close()    }    /**     *     * @param sheet     */    def buildTitle(WritableSheet sheet) {        title?.eachWithIndex { String entry, int i ->            Label titleLabel = new Label(i, 0, entry, getHeadFormat())            sheet.addCell(titleLabel)            sheet.setColumnView(i,20)        }    }    /**     *     * @param sheet     */    def buildBlankBody(WritableSheet sheet){        Validate.notNull(listMap, 'listMap is null')        for (int i in 1 .. 10){            for (int j in 0 .. title.size()-1){                Label label = new Label(j, i, '', getFormat())                sheet.addCell(label)            }            //            listMap?.eachWithIndex { Map.Entry<Integer, List<Object>> entry, int c ->                for (int j in 0 .. title.size()-1){                }                Label blankLabel = new Label(entry.key, i, '', getFormat())                WritableCellFeatures wcf = new WritableCellFeatures()                wcf.setDataValidationList(entry.value)                blankLabel.setCellFeatures(wcf)                sheet.addCell(blankLabel)            }        }    }    /**     *     * @return     * @throws Exception     */    private  WritableCellFormat getHeadFormat() throws Exception {        //        WritableFont wf = new WritableFont(WritableFont.ARIAL, 12, WritableFont.BOLD)        //        WritableCellFormat wcf = new WritableCellFormat(wf)        wcf.setAlignment(Alignment.CENTRE);        wcf.setVerticalAlignment(VerticalAlignment.CENTRE)        wcf.setLocked(true);        wcf.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.GREY_25_PERCENT)        wcf.setBackground(Colour.GREY_25_PERCENT)        return wcf    }    /**     *     * @return     * @throws Exception     */    private  WritableCellFormat getFormat() throws Exception {        //        WritableFont wf = new WritableFont(WritableFont.ARIAL, 12)        //?????????FORMAT        WritableCellFormat wcf = new WritableCellFormat(wf)        wcf.setAlignment(Alignment.LEFT);        wcf.setVerticalAlignment(VerticalAlignment.CENTRE)        wcf.setLocked(true);        wcf.setBorder(Border.ALL, BorderLineStyle.HAIR)        return wcf    }}