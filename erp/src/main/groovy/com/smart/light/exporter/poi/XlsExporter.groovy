package com.smart.light.exporter.poiimport com.smart.light.exporter.poi.cellStyle.CellStyleSetimport groovy.transform.stc.ClosureParamsimport groovy.transform.stc.FromStringimport org.apache.commons.lang.Validateimport org.apache.poi.hssf.usermodel.HSSFCellimport org.apache.poi.ss.usermodel.BuiltinFormatsimport org.apache.poi.ss.usermodel.Cellimport org.apache.poi.ss.usermodel.CellStyleimport org.apache.poi.ss.usermodel.Rowimport org.apache.poi.ss.usermodel.Sheetimport org.apache.poi.ss.usermodel.Workbookimport org.apache.poi.ss.util.CellRangeAddressimport org.apache.poi.xssf.streaming.SXSSFWorkbook/** * Xlsx 格式导出类 * lvpeng */class XlsExporter {    /**     * sheet标题     */    public List titles    /**     * 要创建的excel文件的sheet名称     */    public String sheetName    /**     * 每个sheet数据最大行数     */    public int dataMaxNumber = 500    private  Workbook workbook    /**     * 内存存留最大行数，默认200行     */    int rowAccessWindowSize = 200    /**     *     */    private Map<String, Integer> hasSheetRowStartIndex = [:]    /**     * 默认单元格宽度、高度     */    int columnWidth = 5000    //标题行高度    short height = 510    //数据行高度    short dataHeight = 410    /**     * 记录sheet 下一行号     */    int sheetRowNumNext = 0    CellStyleSet cellStyleSet    /**     * 最大列数 创建多表头时必须设置     */    int maxColNum    /**     * 导出excel     * @param outputStream：OutputStream     * @param dataList：List 输出到excel数据集合     * @param titleClosure：excel标题闭包 缺省buildTitle     * @param recordObject：     * 闭包输出每一列值，闭包必须提供两个参数 List,Object     * 第一个参数是列集合(cellList)，cellList.size=titles.size     * 第二个参数是数据对象     * Example：     *  def recordObject = {List cellList,Object object ->     *      int c = 0     *      cellList[c++].setCellValue(object.xx) //设置cell值object.xx     *      cellList[c++].setCellValue(object.xf)     *      cellList[c].setCellValue(order.getAmount())     *      }     * @throws Exception     */    private void doExport(OutputStream outputStream, List dataList,                          Closure titleClosure = this.&buildTitle,                          @ClosureParams(value=FromString.class, options="List,Object")Closure recordObject) throws Exception {        Validate.notNull(outputStream, 'outputStream is null')        Validate.notNull(dataList, 'dataList is null')        this.workbook = new SXSSFWorkbook(this.rowAccessWindowSize)        cellStyleSet = new CellStyleSet(workbook)        //计算sheet页数        def rem = dataList.size() % dataMaxNumber        int num = dataList.size() / dataMaxNumber        def sheetNum = rem > 0 ? num+1 : num+1        //创建excel        for (int i = 0; i < sheetNum; i++) {            sheetRowNumNext = 0            Sheet sheet = workbook.createSheet("$sheetName 第${i+1}页")            //创建标题            titleClosure.call(sheet)            //创建数据            this.buildBody(sheet,i,dataList,recordObject)        }        this.workbook.write(outputStream)    }    /**     * 创建sheet标题     */    private void buildTitle(Sheet sheet) {        Row titleRow = sheet.createRow(sheetRowNumNext++)        titleRow.setHeight(height)        titles.eachWithIndex { def entry, int i ->            sheet.setColumnWidth(i, columnWidth)            Cell cell = titleRow.createCell(i);            cell.setCellValue(entry);            cell.setCellStyle(cellStyleSet.seaGreenTitleStyle());        }    }    /**     * 创建excel内容     * @param sheet     * @param page     * @param dataList     * @param recordObject     */    private void buildBody(Sheet sheet, int page, List dataList, Closure recordObject) {        //数据索引        def index = page * dataMaxNumber        int maxIndex = dataMaxNumber<=dataList.size()?dataMaxNumber:dataList.size()        for (int j=0; j <maxIndex; j++) {            Row dataRow = sheet.createRow(sheetRowNumNext++)            dataRow.setHeight(dataHeight)            def object = dataList[index++]            //数据cell容器            final List<Cell> cellList = []            for (int c=0; c<getMaxColNum(); c++){                //创建数据单元格                def cell = dataRow.createCell(c)//                cell.setCellStyle(cellStyleSet.whiteStyle());                CellStyle style = workbook.createCellStyle();                style.setAlignment(CellStyle.ALIGN_LEFT);                style.setVerticalAlignment(CellStyle.VERTICAL_CENTER);                style.setDataFormat((short)BuiltinFormats.getBuiltinFormat("TEXT"));                cell.setCellStyle(style);//                cell.setCellType(HSSFCell.CELL_TYPE_STRING);                cellList<< cell            }            //set cell value            recordObject.call(cellList, object)        }    }    public void addMergedRegion(Sheet sheet,CellRangeAddress rangeAddress,def value,int columnIndex,Row row){        sheet.addMergedRegion(rangeAddress);        Cell cell = row.createCell(columnIndex)        cell.setCellValue(value);        cell.setCellStyle(cellStyleSet.seaGreenTitleStyle());    }    public Cell createDefaultCell(Row row,int columnIndex,def value){        Cell cell = row.createCell(columnIndex)        cell.setCellValue(value);        cell.setCellStyle(cellStyleSet.seaGreenTitleStyle());    }    public int getMaxColNum(){        if (this.titles){            return titles.size()        }        return this.maxColNum    }}